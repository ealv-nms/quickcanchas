# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/reclamos', type: :request do
  include AuthHelper
  # This should return the minimal set of attributes required to create a valid
  # Reclamo. As you add validations to Reclamo, be sure to
  # adjust the attributes here as well.
  before(:each) do
    login_user
    @reclamo = create(:reclamo)
  end

  let(:valid_attributes) do
    {
      user_id: create(:user).id,
      titulo: 'Pagina anticristiana',
      contenido: 'Dios'
    }
  end

  let(:invalid_attributes) do
    {
      user_id: nil,
      titulo: nil,
      contenido: nil
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Reclamo.create! valid_attributes
      get reclamos_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      reclamo = Reclamo.create! valid_attributes
      get reclamo_url(reclamo)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_reclamo_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      reclamo = Reclamo.create! valid_attributes
      get edit_reclamo_url(reclamo)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Reclamo' do
        expect do
          post reclamos_url, params: { reclamo: valid_attributes }
        end.to change(Reclamo, :count).by(1)
      end

      it 'redirects to the created reclamo' do
        post reclamos_url, params: { reclamo: valid_attributes }
        expect(response).to redirect_to(reclamo_url(Reclamo.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Reclamo' do
        expect do
          post reclamos_url, params: { reclamo: invalid_attributes }
        end.to change(Reclamo, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post reclamos_url, params: { reclamo: invalid_attributes }
        expect(response).not_to be_successful
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          user_id: create(:user).id,
          titulo: 'Pagina cristiana',
          contenido: 'Que viva dios'
        }
      end

      it 'updates the requested reclamo' do
        reclamo = Reclamo.create! valid_attributes
        patch reclamo_url(reclamo), params: { reclamo: new_attributes }
        reclamo.reload
      end

      it 'redirects to the reclamo' do
        reclamo = Reclamo.create! valid_attributes
        patch reclamo_url(reclamo), params: { reclamo: new_attributes }
        reclamo.reload
        expect(response).to redirect_to(reclamo_url(reclamo))
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        reclamo = Reclamo.create! valid_attributes
        patch reclamo_url(reclamo), params: { reclamo: invalid_attributes }
        expect(response).not_to be_successful
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested reclamo' do
      reclamo = Reclamo.create! valid_attributes
      expect do
        delete reclamo_url(reclamo)
      end.to change(Reclamo, :count).by(-1)
    end

    it 'redirects to the reclamos list' do
      reclamo = Reclamo.create! valid_attributes
      delete reclamo_url(reclamo)
      expect(response).to redirect_to(reclamos_url)
    end
  end
end
