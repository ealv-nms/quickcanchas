# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/resenas', type: :request do
  include AuthHelper
  # This should return the minimal set of attributes required to create a valid
  # Resena. As you add validations to Resena, be sure to
  # adjust the attributes here as well.
  before(:each) do
    login_user
    @cancha = create(:cancha)
  end

  let(:valid_attributes) do
    {
      user_id: create(:user).id,
      cancha_id: @cancha.id,
      puntaje: 1,
      comentario: 'Dios'
    }
  end

  let(:invalid_attributes) do
    {
      user_id: create(:user).id,
      cancha_id: @cancha.id,
      puntaje: -1,
      comentario: ''
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Resena.create! valid_attributes
      get resenas_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      resena = Resena.create! valid_attributes
      get resena_url(resena)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_cancha_resena_url(@cancha)
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      resena = Resena.create! valid_attributes
      get edit_resena_url(resena)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Resena' do
        expect do
          post cancha_resenas_url(@cancha), params: { resena: valid_attributes }
        end.to change(Resena, :count).by(1)
      end

      it 'redirects to the created resena' do
        post cancha_resenas_url(@cancha), params: { resena: valid_attributes }
        expect(response).to redirect_to(cancha_url(@cancha))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Resena' do
        expect do
          post cancha_resenas_url(@cancha), params: { resena: invalid_attributes }
        end.to change(Resena, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post cancha_resenas_url(@cancha), params: { resena: invalid_attributes }
        expect(response).not_to be_successful
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          user_id: create(:user).id,
          cancha_id: create(:cancha).id,
          puntaje: 1,
          comentario: 'Dios'
        }
      end

      it 'updates the requested resena' do
        resena = Resena.create! valid_attributes
        patch resena_url(resena), params: { resena: new_attributes }
        resena.reload
      end

      it 'redirects to the resena' do
        resena = Resena.create! valid_attributes
        patch resena_url(resena), params: { resena: new_attributes }
        resena.reload
        expect(response).to redirect_to(resena_url(resena))
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        resena = Resena.create! valid_attributes
        patch resena_url(resena), params: { resena: invalid_attributes }
        expect(response).not_to be_successful
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested resena' do
      resena = Resena.create! valid_attributes
      expect do
        delete resena_url(resena)
      end.to change(Resena, :count).by(-1)
    end

    it 'redirects to the resenas list' do
      resena = Resena.create! valid_attributes
      delete resena_url(resena)
      expect(response).to redirect_to(resenas_url)
    end
  end
end
