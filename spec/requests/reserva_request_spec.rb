# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/reservas', type: :request do
  include AuthHelper

  # This should return the minimal set of attributes required to create a valid
  # Reserva. As you add validations to Reserva, be sure to
  # adjust the attributes here as well.

  before(:each) do
    login_user
    @cancha = create(:cancha)
    @reserva = create(:reserva)
  end

  let(:valid_attributes) do
    {
      usuario: 'pepe',
      fecha_reserva: @reserva.fecha_reserva,
      horario: 1,
      id_cancha: 1,
      fecha_request: @reserva.fecha_request,
      estado: @reserva.estado,
      fecha_respuesta: @reserva.fecha_respuesta,
      user_id: create(:user).id,
      cancha_id: @cancha.id
    }
  end

  let(:invalid_attributes) do
    {
      usuario: nil,
      fecha_reserva: nil,
      horario: nil,
      id_cancha: nil,
      fecha_request: nil,
      estado: nil,
      fecha_respuesta: nil,
      user_id: nil,
      cancha_id: nil
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Reserva.create! valid_attributes
      get cancha_reservas_path(@cancha)
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      reserva = Reserva.create! valid_attributes
      get reserva_url(reserva)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_cancha_reserva_url(@cancha)
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      reserva = Reserva.create! valid_attributes
      get edit_reserva_url(reserva)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Reserva' do
        expect do
          post cancha_reservas_url(@cancha), params: { reserva: valid_attributes }
        end.to change(Reserva, :count).by(1)
      end

      it 'redirects to the created reserva' do
        post cancha_reservas_url(@cancha), params: { reserva: valid_attributes }
        expect(response).to redirect_to(cancha_url(@cancha))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Reserva' do
        expect do
          post cancha_reservas_url(@cancha), params: { reserva: invalid_attributes }
        end.to change(Reserva, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post cancha_reservas_url(@cancha), params: { reserva: invalid_attributes }
        expect(response).not_to be_successful
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          usuario: 'pepino',
          fecha_reserva: @reserva.fecha_reserva,
          horario: 3,
          id_cancha: 1,
          fecha_request: @reserva.fecha_request,
          estado: @reserva.estado,
          fecha_respuesta: @reserva.fecha_respuesta,
          user_id: create(:user).id,
          cancha_id: @cancha.id
        }
      end

      it 'updates the requested reserva' do
        reserva = Reserva.create! valid_attributes
        patch reserva_url(reserva), params: { reserva: new_attributes }
        reserva.reload
      end

      it 'redirects to the reserva' do
        reserva = Reserva.create! valid_attributes
        patch reserva_url(reserva), params: { reserva: new_attributes }
        reserva.reload
        expect(response).to redirect_to(reserva_url(reserva))
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        reserva = Reserva.create! valid_attributes
        patch reserva_url(reserva), params: { reserva: invalid_attributes }
        expect(response).not_to be_successful
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested reserva' do
      reserva = Reserva.create! valid_attributes
      expect do
        delete reserva_url(reserva)
      end.to change(Reserva, :count).by(-1)
    end

    it 'redirects to the reservas list' do
      reserva = Reserva.create! valid_attributes
      delete reserva_url(reserva)
      expect(response).to redirect_to(reservas_url)
    end
  end
end
